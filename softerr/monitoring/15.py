import asyncio
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.client.default import DefaultBotProperties
from config import TELEGRAM_TOKEN, ADMIN_IDS, PROXY_LIST_PATH, EMAIL_LIST_PATH, PASTES_PATH

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()
user_add_mode = {}  # user_id: "account"|"cookie"

EMAILS_PER_PAGE = 10
PROXIES_PER_PAGE = 10
PASTES_PER_PAGE = 5

LOG_PATH = "logs.txt"
ERRORS_PATH = "errors.txt"
WALLA_READY_PATH = "wallapop_ready.txt"  # –ù–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≥–æ—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

def file_lines(path):
    try:
        with open(path, encoding="utf-8") as f:
            return [l.strip() for l in f if l.strip()]
    except Exception:
        return []

def save_lines(path, lines):
    with open(path, "w", encoding="utf-8") as f:
        for l in lines:
            f.write(l + "\n")

def append_lines(path, lines):
    with open(path, "a", encoding="utf-8") as f:
        for l in lines:
            f.write(l + "\n")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
def get_main_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="start_mailing")],
            [InlineKeyboardButton(text="‚èπ –°—Ç–æ–ø —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="stop_mailing")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(text="üìã –ê–∫–∫–∞—É–Ω—Ç—ã (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)", callback_data="accounts_menu_0")],
            [InlineKeyboardButton(text="üíº Wallapop-–∞–∫–∫–∞—É–Ω—Ç—ã (–≥–æ—Ç–æ–≤—ã–µ)", callback_data="wallapop_menu")],
            [InlineKeyboardButton(text="üåê –ü—Ä–æ–∫—Å–∏", callback_data="proxies_menu_0")],
            [InlineKeyboardButton(text="üí¨ –®–∞–±–ª–æ–Ω—ã", callback_data="pastes_menu_0")],
            [InlineKeyboardButton(text="üìù –õ–æ–≥–∏", callback_data="logs_menu")],
            [InlineKeyboardButton(text="üö® –û—à–∏–±–∫–∏", callback_data="errors_menu")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")],
        ]
    )

# --- Wallapop –∞–∫–∫–∞—É–Ω—Ç—ã ---
def get_wallapop_menu():
    rows = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="wallapop_add")],
        [InlineKeyboardButton(text="üìÉ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="wallapop_list")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

@dp.callback_query()
async def universal_callback(call: types.CallbackQuery):
    data = call.data

    # ...–°—Ç–∞—Ä—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é

    if data == "wallapop_menu":
        await call.message.edit_text("Wallapop-–∞–∫–∫–∞—É–Ω—Ç—ã (—É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):", reply_markup=get_wallapop_menu())
    elif data == "wallapop_add":
        user_add_mode[call.from_user.id] = "wallapop"
        await call.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Wallapop (–Ω–∞–ø—Ä–∏–º–µ—Ä, email:–ø–∞—Ä–æ–ª—å:—Ç–æ–∫–µ–Ω –∏–ª–∏ –≤ –≤–∞—à–µ–º —Ñ–æ—Ä–º–∞—Ç–µ):", reply_markup=get_wallapop_menu())
    elif data == "wallapop_list":
        accounts = file_lines(WALLA_READY_PATH)
        if accounts:
            text = "\n".join(accounts)
        else:
            text = "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
        await call.message.edit_text(text, reply_markup=get_wallapop_menu())
    # ...–î–∞–ª–µ–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è email –∏ wallapop) ---
@dp.message()
async def handle_account_add(msg: types.Message):
    uid = msg.from_user.id
    if uid in user_add_mode:
        mode = user_add_mode[uid]
        lines = [l.strip() for l in msg.text.splitlines() if l.strip()]
        if mode == "account":
            append_lines(EMAIL_LIST_PATH, lines)
            await msg.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(lines)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤.", reply_markup=get_accounts_menu(0))
        elif mode == "wallapop":
            append_lines(WALLA_READY_PATH, lines)
            await msg.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(lines)} –≥–æ—Ç–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Wallapop.", reply_markup=get_wallapop_menu())
        user_add_mode.pop(uid)
    else:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –º–µ–Ω—é –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=ReplyKeyboardRemove())

# --- –í—ã–∑–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è) ---
@dp.callback_query(lambda c: c.data == "account_add")
async def account_add(call: types.CallbackQuery):
    user_add_mode[call.from_user.id] = "account"
    await call.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º email:password (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∫–∞–∂–¥—ã–π –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –í –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts_menu_0")]])
    )

# ...–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è