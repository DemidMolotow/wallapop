import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TELEGRAM_TOKEN, ADMIN_IDS
from monitoring.mailing_control import start_mailing, stop_mailing, get_stats

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

def get_main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="start_mailing"),
        InlineKeyboardButton("‚èπ –°—Ç–æ–ø —Ä–∞—Å—Å—ã–ª–∫–∏", callback_data="stop_mailing"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("üìã –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts_menu"),
        InlineKeyboardButton("üåê –ü—Ä–æ–∫—Å–∏", callback_data="proxies_menu"),
        InlineKeyboardButton("üí¨ –®–∞–±–ª–æ–Ω—ã", callback_data="templates_menu"),
        InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data="logs"),
        InlineKeyboardButton("üö® –û—à–∏–±–∫–∏", callback_data="errors"),
        InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
    )
    return kb

@dp.message(F.text == "/start")
async def start_cmd(msg: types.Message):
    if msg.from_user.id not in ADMIN_IDS:
        return await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

@dp.callback_query(lambda call: call.data in [
    "start_mailing", "stop_mailing", "stats", "logs", "errors", "settings"
])
async def main_menu_handler(call: types.CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        return await call.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    if call.data == "start_mailing":
        status = await start_mailing()
        await call.message.edit_text(status, reply_markup=get_main_menu())
    elif call.data == "stop_mailing":
        status = await stop_mailing()
        await call.message.edit_text(status, reply_markup=get_main_menu())
    elif call.data == "stats":
        await call.message.edit_text(get_stats(), reply_markup=get_main_menu())
    elif call.data == "logs":
        await call.message.edit_text("–õ–æ–≥–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã", reply_markup=get_main_menu())
    elif call.data == "errors":
        await call.message.edit_text("–û—à–∏–±–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã", reply_markup=get_main_menu())
    elif call.data == "settings":
        await call.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã", reply_markup=get_main_menu())

@dp.callback_query(lambda call: call.data.endswith("_menu"))
async def menu_router(call: types.CallbackQuery):
    await call.message.edit_text(f"–†–∞–∑–¥–µ–ª {call.data.replace('_menu','').title()} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=get_main_menu())

@dp.message()
async def fallback(msg: types.Message):
    await msg.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.", reply_markup=get_main_menu())

async def start_bot():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start_bot())