import logging
import json
import os
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters, ConversationHandler
)
from filters import FilterSettings, get_filter_keyboard, filter_to_text
from parser import WallapopParser

TELEGRAM_TOKEN = "7512529507:AAHga264aQDpBF9fsSHrvDVgInkjwfPJ96o"
USER_ID = 7541702112  # –í–∞—à Telegram user_id

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

CHOOSE_FILTER, SET_FILTER_VALUE = range(2)
user_filters = {}
SEEN_FILE = "seen.json"

def load_seen():
    if not os.path.exists(SEEN_FILE):
        return set()
    try:
        with open(SEEN_FILE, "r", encoding="utf-8") as f:
            data = f.read().strip()
            if not data:
                return set()
            return set(json.loads(data))
    except Exception:
        return set()

def save_seen(seen):
    with open(SEEN_FILE, "w", encoding="utf-8") as f:
        json.dump(list(seen), f)

seen_ads = load_seen()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π Wallapop.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /filters –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤—å /go –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
    )

async def filters_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return ConversationHandler.END
    user_id = update.effective_user.id
    user_filters[user_id] = FilterSettings()
    await update.message.reply_text(
        "üîé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è:",
        reply_markup=get_filter_keyboard()
    )
    return CHOOSE_FILTER

async def choose_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    key = query.data
    context.user_data["selected_filter"] = key
    await query.edit_message_text(
        text=f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞: {filter_to_text(key)}"
    )
    return SET_FILTER_VALUE

async def set_filter_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    key = context.user_data["selected_filter"]
    val = update.message.text.strip()
    fs = user_filters.get(user_id)
    if not fs:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /filters.")
        return ConversationHandler.END
    try:
        ok = fs.set(key, val)
    except Exception as ex:
        await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –û—à–∏–±–∫–∞: {ex}")
        return SET_FILTER_VALUE
    if not ok:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return SET_FILTER_VALUE
    await update.message.reply_text(
        f"–§–∏–ª—å—Ç—Ä \"{filter_to_text(key)}\" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {val}\n"
        "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â—ë —Ñ–∏–ª—å—Ç—Ä (/filters) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /go –¥–ª—è –ø–æ–∏—Å–∫–∞."
    )
    return ConversationHandler.END

async def go_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    user_id = update.effective_user.id
    fs = user_filters.get(user_id)
    if not fs:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–æ–π /filters.")
        return
    await update.message.reply_text("üîÑ –ò—â—É –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    parser = WallapopParser(domain=fs.domain)
    new_count = 0
    async for ad in parser.parse_stream(max_pages=2):
        passed = fs.apply([ad])
        if passed and ad.get('url') not in seen_ads:
            msg = (
                f"üîπ <b>{ad.get('title')}</b>\n"
                f"üí∏ –¶–µ–Ω–∞: {ad.get('price')}\n"
                f"üìç –õ–æ–∫–∞—Ü–∏—è: {ad.get('location','?')}\n"
                f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {'–≤–∫–ª.' if ad.get('delivery') else '–Ω–µ—Ç'}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ad.get('desc','-')}\n\n"
                f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {ad.get('seller_name','?')}\n"
                f"‚≠êÔ∏è –û—Ü–µ–Ω–æ–∫: {ad.get('seller_rating','?')}\n"
                f"üì• –ü–æ–∫—É–ø–æ–∫: {ad.get('seller_purchases','?')}\n"
                f"üì§ –ü—Ä–æ–¥–∞–∂: {ad.get('seller_sales','?')}\n"
                f"üîó <a href='{ad.get('chat_url','')}'>–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç</a>\n\n"
                f"üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {ad.get('post_date','?')}\n"
                f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {ad.get('views','?')}\n"
                f"üìë –û–±—ä—è–≤–ª–µ–Ω–∏–π: {ad.get('seller_ads_count','?')}\n"
                f"üóì –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {ad.get('seller_reg_date','?')}\n\n"
                f"üîó <a href='{ad.get('url','')}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é</a>\n"
                f"üîó <a href='{ad.get('photo','')}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–æ—Ç–æ</a>"
            )
            try:
                await update.message.reply_html(msg, disable_web_page_preview=True)
            except Exception as ex:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex}")
            seen_ads.add(ad.get('url'))
            new_count += 1
            save_seen(seen_ads)
    if new_count == 0:
        await update.message.reply_text("–ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await update.message.reply_text(f"–ü–æ–∫–∞–∑–∞–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {new_count}")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("filters", filters_command)],
        states={
            CHOOSE_FILTER: [CallbackQueryHandler(choose_filter)],
            SET_FILTER_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_filter_value)],
        },
        fallbacks=[],
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("go", go_command))
    app.run_polling()

if __name__ == "__main__":
    main()
